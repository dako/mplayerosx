#!/bin/sh
# MPlayer OSX build script
# Adrian Stutz 2008

# *** CONFIG
build_root="/Users/adrian/dev/mplayer/mplayer_static/usr/local"
target_system="i386"
binary_dest="/Users/adrian/dev/mplayer/mplayer_static/binaries"
binary_name="mplayer"

do_clean=1
do_move=1
do_update=0
do_quiet=0

success_sound="/System/Library/Sounds/Glass.aiff"
failure_sound="/System/Library/Sounds/Basso.aiff"
qtplay_path="/opt/local/bin/qtplay"

usage()
{
    echo "usage: build.sh [-nc|--no-clean][-nm|--no-move][-u|--update][i386|ppc|ppcg3]"
}

# Parse command line
while [ -n "$1" ]; do
	case $1 in
		i386 | ppc | ppcg3 )	target_system=$1
								;;
		-nc | --no-clean )		do_clean=0
								;;
		-nm | --no-move )		do_move=0
								;;
		-u | --update )			do_update=1
								;;
		-q | --quiet )			do_quiet=1
								;;
		-h | --help )			usage
								exit
								;;
		* )						usage
								exit 1
	esac
	shift
done

# Quiet string
if [ $do_quiet -eq 1 ]; then
	echo "" > build.log
	output=" >> build.log 2>> build.log"
else
	output=""
fi

# Destination for binary
binary_dest="${binary_dest}/`date +%Y%m%d`"

# *** FLAGS
# Make sure pkg-config doesn't interfere
export PKG_CONFIG_PATH=""
# Reset path to default + our own build root
export PATH="${build_root}/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin"

# Set target to OSX 10.4
export MACOSX_DEPLOYMENT_TARGET=10.4
export CFLAGS="-mmacosx-version-min=10.4 -isystem /Developer/SDKs/MacOSX10.4u.sdk"
export LDFLAGS="-mmacosx-version-min=10.4 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk"
export CXXFLAGS="-mmacosx-version-min=10.4 -isysroot /Developer/SDKs/MacOSX10.4u.sdk"

# General compiler and linker flags
export CFLAGS="-O4 -fomit-frame-pointer -pipe $CFLAGS"
export CXXFLAGS="-O4 -fomit-frame-pointer -pipe $CXXFLAGS"

# Intel platform flags
#if [ $target_system = "i386" ]; then
	# None yet
#fi

# PPC platform flags
if [ "$target_system" = "ppc" ]; then
	export CFLAGS="$CFLAGS -arch ppc -faltivec -mcpu=7450"
	export LDFLAGS="$LDFLAGS -arch ppc"
	export CXXFLAGS="$CXXFLAGS -arch ppc -faltivec -mcpu=7450"
fi

# PPC G3 platform flags
if [ "$target_system" = "ppcg3" ]; then
	export CFLAGS="$CFLAGS -arch ppc -mcpu=750"
	export LDFLAGS="$LDFLAGS -arch ppc"
	export CXXFLAGS="$CXXFLAGS -arch ppc -mcpu=750"
fi

# Set paths
export LDFLAGS="$LDFLAGS -L${build_root}/lib -Wl,-search_paths_first"
export CFLAGS="$CFLAGS -I${build_root}/include"
export CXXFLAGS="$CXXFLAGS -I${build_root}/include"

# *** Base configure options
config_opts=""
config_opts="$config_opts --prefix=${build_root}"
# Make sure expat and dvdcss are linked and that we link to static libraries (if found first)
config_opts="$config_opts"' --extra-libs="-lexpat -ldvdcss -Wl,-search_paths_first"'
# Disable X11 and GL outputs
config_opts="$config_opts --disable-x11"
config_opts="$config_opts --disable-gl"
# Disable MEncoder and the internal dvdread (for linking the external one)
config_opts="$config_opts --disable-mencoder"
config_opts="$config_opts --disable-dvdread-internal"
# Enable the apple remote (in case we build on a system without infrared)
config_opts="$config_opts --enable-apple-remote"
# Disable jack (auto-enabled if installed)
config_opts="$config_opts --disable-jack"

# Intel platform options
if [ "$target_system" = "i386" ]; then
	# Disable 3Dnow and AMD machines because it can cause audio distortion
	config_opts="$config_opts --disable-3dnow"
	config_opts="$config_opts --disable-3dnowext"
fi

# PPC platform options
if [ "$target_system" = "ppc" -o "$target_system" = "ppcg3" ]; then
	# Enable PPC crosscompile
	config_opts="$config_opts --enable-cross-compile"
	config_opts="$config_opts"' --cc="cc -arch ppc"'
	config_opts="$config_opts"' --host-cc="cc -arch i386"'
	config_opts="$config_opts --target=ppc-darwin"
	config_opts="$config_opts --disable-win32dll"
	
	# PPC Altivec
	if [ "$target_system" != "ppcg3" ]; then
		config_opts="$config_opts --enable-altivec"
	else
		config_opts="$config_opts --disable-altivec"
	fi
fi

# *** DEBUG
echo "***** BUILDING MPLAYER *****"
echo "Target platform: $target_system"
echo "CFLAGS: $CFLAGS"
echo "CXXFLAGS: $CXXFLAGS"
echo "LDFLAGS: $LDFLAGS"
echo "configure options: $config_opts"
if [ $do_move -eq 1 ]; then
	echo "binary will be moved to: $binary_dest"
fi
# Sounds need qtplay
if [ ! -f "$qtplay_path" ]; then
	success_sound=""
	failure_sound=""
	echo "Sounds disabled: qtplay required."
fi
echo "****************************"

# *** UPDATE
if [ $do_update -eq 1 ]; then
	echo "********* UPDATING *********"
	eval "svn update $output"
fi

# *** CLEAN BUILD
if [ $do_clean -eq 1 ]; then
	echo "********* CLEANING *********"
	eval "make clean $output"
fi

# *** BUILD
echo "****** CONFIG && MAKE ******"
eval "./configure $config_opts $output" && eval "make $output"

# *** MOVE BINARY
echo "******** FINISH UP *********"
if [ ! -f "mplayer" ]; then
	# FAIL!
	echo "Compilation failed!"
	if [ -n "$failure_sound" ]; then
		$qtplay_path $failure_sound > /dev/null
	fi
	exit 1
else
	# WIN!
	if [ $do_move -eq 1 ]; then
		if [ ! -d "$binary_dest" ]; then
			mkdir -p $binary_dest
		fi
		cp mplayer $binary_dest"/$binary_name.$target_system"
		echo "Binary moved to: $binary_dest/$binary_name.$target_system"
		
		# Merge universal binary if possible
		if [ -f "$binary_dest/$binary_name.i386" -a -f "$binary_dest/$binary_name.ppc" ]; then
			lipo -create "$binary_dest/$binary_name.i386" "$binary_dest/$binary_name.ppc" -output "$binary_dest/$binary_name.ub"
			echo "Universal binary merged at: $binary_dest/$binary_name.ub"
		fi
	fi
	
	echo "Compilation successful!"
	if [ -n "$success_sound" ]; then
		$qtplay_path $success_sound > /dev/null
	fi
fi